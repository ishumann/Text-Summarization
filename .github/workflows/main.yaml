# The provided YAML code defines a GitHub Actions workflow for a Continuous Integration (CI) and Continuous Delivery (CD) pipeline. This workflow automates the process of building, testing, and deploying a Docker container to Amazon Elastic Container Registry (ECR) and subsequently deploying it to a self-hosted environment.

# The workflow consists of three main jobs: integration, build-and-push-ecr-image, and Continuous-Deployment.

# Integration Job:

# This job is named "Continuous Integration" and runs on the ubuntu-latest runner.
# It includes steps to check out the code from the repository using the actions/checkout@v3 action.
# It then runs a placeholder command to lint the code (echo "Linting repository").
# Finally, it runs another placeholder command to execute unit tests (echo "Running unit tests").
# Build and Push ECR Image Job:

# This job is named "Continuous Delivery" and depends on the successful completion of the integration job.
# It also runs on the ubuntu-latest runner.
# The steps include checking out the code again using the actions/checkout@v3 action.
# It installs necessary utilities (jq and unzip) using apt-get.
# AWS credentials are configured using the aws-actions/configure-aws-credentials@v1 action, with credentials provided via GitHub Secrets.
# The job logs in to Amazon ECR using the aws-actions/amazon-ecr-login@v1 action.
# It then builds a Docker image, tags it, and pushes it to Amazon ECR. The image is tagged with the latest tag, and the ECR registry and repository details are retrieved from the previous login step and GitHub Secrets, respectively.
# The image URI is set as an output variable for use in subsequent jobs.
# Continuous Deployment Job:

# This job depends on the successful completion of the build-and-push-ecr-image job.
# It runs on a self-hosted runner.
# The steps include checking out the code using the actions/checkout@v3 action.
# AWS credentials are configured again using the aws-actions/configure-aws-credentials@v1 action.
# The job logs in to Amazon ECR using the aws-actions/amazon-ecr-login@v1 action.
# It pulls the latest Docker image from ECR using the docker pull command.
# The commented-out step is intended to stop and remove any running container named texts.
# It then runs the Docker image in detached mode, mapping port 8080 of the container to port 8080 of the host. Environment variables for AWS credentials and region are passed to the container.
# Finally, it cleans up any unused Docker images and containers using the docker system prune -f command.


name: workflow

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'README.md'

permissions:
  id-token: write
  contents: read

jobs:
    

  integration:
    name: Continuous Integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Lint code
        run: echo "Linting repository"

      - name: Run unit tests
        run: echo "Running unit tests"

  build-and-push-ecr-image:
    name: Continuous Delivery
    needs: integration
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Install Utilities
        run: |
          sudo apt-get update
          sudo apt-get install -y jq unzip
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
  Continuous-Deployment:
    needs: build-and-push-ecr-image
    runs-on: self-hosted
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1
      
      
      - name: Pull latest images
        run: |
         docker pull ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
         
      # - name: Stop and remove container if running
      #   run: |
      #    docker ps -q --filter "name=texts" | grep -q . && docker stop texts && docker rm -fv texts
       
      - name: Run Docker Image to serve users
        run: |
         docker run -d -p 8080:8080 --name=texts -e 'AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}' -e 'AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}' -e 'AWS_REGION=${{ secrets.AWS_REGION }}'  ${{secrets.AWS_ECR_LOGIN_URI}}/${{ secrets.ECR_REPOSITORY_NAME }}:latest
      - name: Clean previous images and containers
        run: |
         docker system prune -f